// Code generated by protoc-gen-go.
// source: github.com/asim/mq/proto/mq.proto
// DO NOT EDIT!

/*
Package mq is a generated protocol buffer package.

It is generated from these files:
	github.com/asim/mq/proto/mq.proto

It has these top-level messages:
	PubRequest
	PubResponse
	SubRequest
	SubResponse
*/
package mq

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PubRequest struct {
	Topic   string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *PubRequest) Reset()                    { *m = PubRequest{} }
func (m *PubRequest) String() string            { return proto.CompactTextString(m) }
func (*PubRequest) ProtoMessage()               {}
func (*PubRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PubResponse struct {
}

func (m *PubResponse) Reset()                    { *m = PubResponse{} }
func (m *PubResponse) String() string            { return proto.CompactTextString(m) }
func (*PubResponse) ProtoMessage()               {}
func (*PubResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SubRequest struct {
	Topic string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
}

func (m *SubRequest) Reset()                    { *m = SubRequest{} }
func (m *SubRequest) String() string            { return proto.CompactTextString(m) }
func (*SubRequest) ProtoMessage()               {}
func (*SubRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type SubResponse struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *SubResponse) Reset()                    { *m = SubResponse{} }
func (m *SubResponse) String() string            { return proto.CompactTextString(m) }
func (*SubResponse) ProtoMessage()               {}
func (*SubResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*PubRequest)(nil), "mq.PubRequest")
	proto.RegisterType((*PubResponse)(nil), "mq.PubResponse")
	proto.RegisterType((*SubRequest)(nil), "mq.SubRequest")
	proto.RegisterType((*SubResponse)(nil), "mq.SubResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MQ service

type MQClient interface {
	Pub(ctx context.Context, in *PubRequest, opts ...grpc.CallOption) (*PubResponse, error)
	Sub(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (MQ_SubClient, error)
}

type mQClient struct {
	cc *grpc.ClientConn
}

func NewMQClient(cc *grpc.ClientConn) MQClient {
	return &mQClient{cc}
}

func (c *mQClient) Pub(ctx context.Context, in *PubRequest, opts ...grpc.CallOption) (*PubResponse, error) {
	out := new(PubResponse)
	err := grpc.Invoke(ctx, "/mq.MQ/Pub", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQClient) Sub(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (MQ_SubClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MQ_serviceDesc.Streams[0], c.cc, "/mq.MQ/Sub", opts...)
	if err != nil {
		return nil, err
	}
	x := &mQSubClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MQ_SubClient interface {
	Recv() (*SubResponse, error)
	grpc.ClientStream
}

type mQSubClient struct {
	grpc.ClientStream
}

func (x *mQSubClient) Recv() (*SubResponse, error) {
	m := new(SubResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MQ service

type MQServer interface {
	Pub(context.Context, *PubRequest) (*PubResponse, error)
	Sub(*SubRequest, MQ_SubServer) error
}

func RegisterMQServer(s *grpc.Server, srv MQServer) {
	s.RegisterService(&_MQ_serviceDesc, srv)
}

func _MQ_Pub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQServer).Pub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mq.MQ/Pub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQServer).Pub(ctx, req.(*PubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQ_Sub_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MQServer).Sub(m, &mQSubServer{stream})
}

type MQ_SubServer interface {
	Send(*SubResponse) error
	grpc.ServerStream
}

type mQSubServer struct {
	grpc.ServerStream
}

func (x *mQSubServer) Send(m *SubResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _MQ_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mq.MQ",
	HandlerType: (*MQServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pub",
			Handler:    _MQ_Pub_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sub",
			Handler:       _MQ_Sub_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/asim/mq/proto/mq.proto",
}

func init() { proto.RegisterFile("github.com/asim/mq/proto/mq.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x52, 0x4c, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0x2c, 0xce, 0xcc, 0xd5, 0xcf, 0x2d, 0xd4, 0x2f,
	0x28, 0xca, 0x2f, 0xc9, 0xd7, 0xcf, 0x2d, 0xd4, 0x03, 0x33, 0x84, 0x98, 0x72, 0x0b, 0x95, 0x6c,
	0xb8, 0xb8, 0x02, 0x4a, 0x93, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x44, 0xb8, 0x58,
	0x4b, 0xf2, 0x0b, 0x32, 0x93, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x20, 0x1c, 0x21, 0x09,
	0x2e, 0xf6, 0x82, 0xc4, 0xca, 0x9c, 0xfc, 0xc4, 0x14, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x9e, 0x20,
	0x18, 0x57, 0x89, 0x97, 0x8b, 0x1b, 0xac, 0xbb, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x49, 0x89,
	0x8b, 0x2b, 0x98, 0x80, 0x61, 0x4a, 0xea, 0x5c, 0xdc, 0xc1, 0x08, 0x2d, 0xc8, 0x66, 0x33, 0xa2,
	0x98, 0x6d, 0x14, 0xc5, 0xc5, 0xe4, 0x1b, 0x28, 0xa4, 0xc1, 0xc5, 0x1c, 0x50, 0x9a, 0x24, 0xc4,
	0xa7, 0x97, 0x5b, 0xa8, 0x87, 0x70, 0xa8, 0x14, 0x3f, 0x9c, 0x0f, 0xb5, 0x9a, 0x41, 0x48, 0x8b,
	0x8b, 0x39, 0x18, 0xa6, 0x32, 0x18, 0x4d, 0x65, 0x30, 0xb2, 0x4a, 0x03, 0xc6, 0x24, 0x36, 0x70,
	0x00, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x9f, 0xa9, 0x98, 0x0c, 0x25, 0x01, 0x00, 0x00,
}
